{"version":3,"sources":["AppInstall.js","Recorder.js","App.js","serviceWorker.js","index.js"],"names":["Component","AppInstall","props","useState","deferredPrompt","setDeferredPrompt","showInstallPrompt","setShowInstallPrompt","useEffect","window","addEventListener","e","preventDefault","console","log","className","onClick","prompt","userChoice","then","choiceResult","outcome","Recorder","mediaRecorder","setMediaRecorder","isRecording","setIsRecording","recorderRef","useRef","playerRef","enableRecorder","current","onloadedmetadata","play","chunks","ondataavailable","push","data","onstop","blob","Blob","type","videoURL","URL","createObjectURL","src","a","navigator","mediaDevices","getUserMedia","audio","video","facingMode","stream","srcObject","MediaRecorder","Fragment","state","start","stop","ref","autoPlay","playsInline","muted","controls","withAppInstall","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.297a09f8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './AppInstall.scss';\n\nconst AppInstall = props => {\n\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [showInstallPrompt, setShowInstallPrompt] = useState(false);\n\n  useEffect(() => {\n\n    window.addEventListener('beforeinstallprompt', (e) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      setDeferredPrompt(e);\n      // Update UI notify the user they can install the PWA\n      setShowInstallPrompt(true);\n    });\n\n    window.addEventListener('appinstalled', (e) => {\n      console.log('a2hs installed');\n    });\n\n  }, []);\n\n  const installApp = () => {\n    // Hide the app provided install promotion\n    setShowInstallPrompt(false);\n    // Show the install prompt\n    deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    deferredPrompt.userChoice.then((choiceResult) => {\n      if (choiceResult.outcome === 'accepted') {\n        console.log('User accepted the install prompt');\n      } else {\n        console.log('User dismissed the install prompt');\n      }\n    })\n  }\n\n  return (\n    showInstallPrompt &&\n    <div className=\"AppInstall\">\n      <div>Customer App Installer React PWA <button onClick={installApp}>Install</button></div>\n    </div>\n  );\n}\n\nexport const withAppInstall = Component => {\n  return () => (\n    <React.Fragment>\n      <AppInstall />\n      <Component />\n    </React.Fragment>\n  )\n}\n\nexport default AppInstall;","import React, { useState, useEffect, useRef } from \"react\";\nimport './Recorder.scss';\n\nconst Recorder = props => {\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const recorderRef = useRef();\n  const playerRef = useRef();\n\n  useEffect(() => {\n    enableRecorder();\n\n    // playback recorded media\n    playerRef.current.onloadedmetadata = (e) => {\n      playerRef.current.play();\n    }\n  }, [])\n\n  useEffect(() => {\n    if (!mediaRecorder) return;\n\n    let chunks = [];\n\n    mediaRecorder.ondataavailable = (e) => {\n      chunks.push(e.data);\n    }\n\n    mediaRecorder.onstop = (e) => {\n      let blob = new Blob(chunks, { type: 'video/mp4' });\n      chunks = [];\n      let videoURL = window.URL.createObjectURL(blob);\n      playerRef.current.src = videoURL;\n    }\n  }, [mediaRecorder]);\n\n  const start = () => {\n    if (mediaRecorder.state === 'recording') return;\n    mediaRecorder.start();\n    setIsRecording(true);\n    console.log(mediaRecorder.state);\n  }\n\n  const stop = () => {\n    if (mediaRecorder.state === 'inactive') return;\n    mediaRecorder.stop();\n    setIsRecording(false);\n    console.log(mediaRecorder.state);\n  }\n\n  const enableRecorder = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: {\n          facingMode: 'user'\n        }\n      });\n\n      recorderRef.current.onloadedmetadata = (e) => {\n        playerRef.current.play();\n      }\n\n      recorderRef.current.srcObject = stream;\n\n      setMediaRecorder(new MediaRecorder(stream));\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <div>\n        {!isRecording && <button onClick={start}>Start Recording</button>}\n        {isRecording && <button onClick={stop} className={'recording'}>Stop Recodring</button>}\n      </div>\n      <div>\n        <h3>Recorder</h3>\n        <video\n          className=\"recorder\"\n          ref={recorderRef}\n          autoPlay\n          playsInline\n          muted\n        />\n      </div>\n      <div>\n        <h3>Playback</h3>\n        <video\n          className=\"player\"\n          controls\n          ref={playerRef}\n          autoPlay\n          playsInline\n        />\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default Recorder;","import React from 'react';\nimport './App.scss';\nimport { withAppInstall } from './AppInstall';\nimport Webcam from './Webcam';\nimport Recorder from './Recorder';\n\nconst App = props => {\n  return (\n    <div className=\"App\">\n      <h1>Camera</h1>\n      {/* <Webcam /> */}\n      {<Recorder />}\n    </div>\n  );\n}\n\nexport default withAppInstall(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}