{"version":3,"sources":["logo.svg","AppInstall.js","Webcam.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","AppInstall","props","useState","deferredPrompt","setDeferredPrompt","showInstallPrompt","setShowInstallPrompt","useEffect","window","addEventListener","e","preventDefault","console","log","className","onClick","prompt","userChoice","then","choiceResult","outcome","Webcam","mediaStream","setMediaStream","videoRef","useRef","enableStream","current","srcObject","a","navigator","mediaDevices","getUserMedia","audio","video","facingMode","stream","Fragment","ref","onCanPlay","play","autoPlay","playsInline","muted","withAppInstall","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"0JAAAA,EAAOC,QAAU,IAA0B,kC,6ECgDbC,E,2DA7CxBC,G,MAAa,SAAAC,GAAU,IAAD,EAEkBC,mBAAS,MAF3B,mBAEnBC,EAFmB,KAEHC,EAFG,OAGwBF,oBAAS,GAHjC,mBAGnBG,EAHmB,KAGAC,EAHA,KAK1BC,qBAAU,WAERC,OAAOC,iBAAiB,uBAAuB,SAACC,GAE9CA,EAAEC,iBAEFP,EAAkBM,GAElBJ,GAAqB,MAGvBE,OAAOC,iBAAiB,gBAAgB,SAACC,GACvCE,QAAQC,IAAI,uBAGb,IAiBH,OACER,GACA,yBAAKS,UAAU,cACb,iEAAsC,4BAAQC,QAlB/B,WAEjBT,GAAqB,GAErBH,EAAea,SAEfb,EAAec,WAAWC,MAAK,SAACC,GACD,aAAzBA,EAAaC,QACfR,QAAQC,IAAI,oCAEZD,QAAQC,IAAI,0CAQwB,e,uBCW7BQ,EApDA,SAAApB,GAAU,IAAD,EACgBC,mBAAS,MADzB,mBACfoB,EADe,KACFC,EADE,KAEhBC,EAAWC,mBAGjBlB,qBAAU,WAIR,OAHAmB,IAGQ,eAGP,IAGHnB,qBAAU,WACJe,GAAeE,EAASG,UAAYH,EAASG,QAAQC,YACvDJ,EAASG,QAAQC,UAAYN,KAE9B,CAACA,IAEJ,IAAMI,EAAY,uCAAG,4BAAAG,EAAA,+EAEIC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,EACPC,MAAO,CAAEC,WAAY,iBAJN,OAEXC,EAFW,OAMjBb,EAAea,GANE,gDASjBxB,QAAQC,IAAR,MATiB,yDAAH,qDAiBlB,OACES,GACA,kBAAC,IAAMe,SAAP,KACE,2BACEC,IAAKd,EACLe,UATgB,WACpBf,EAASG,QAAQa,QASbC,UAAQ,EACRC,aAAW,EACXC,OAAK,MCnBEC,GFmBe7C,EE1ClB,SAAAE,GACV,OACE,yBAAKa,UAAU,OAeb,oEACA,kBAAC,EAAD,QFyBG,kBACL,kBAAC,IAAMuB,SAAP,KACE,kBAAC,EAAD,MACA,kBAACtC,EAAD,SGxCA8C,EAAcC,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BtB,UAAUuB,cACPC,SAASH,GACTjC,MAAK,SAAAqC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACf9B,UAAUuB,cAAcQ,YAI1BjD,QAAQC,IACN,iHAKEuC,GAAUA,EAAOU,UACnBV,EAAOU,SAASP,KAMlB3C,QAAQC,IAAI,sCAGRuC,GAAUA,EAAOW,WACnBX,EAAOW,UAAUR,WAO5BS,OAAM,SAAAC,GACLrD,QAAQqD,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBjB,GACvB,GAA6C,kBAAmBtB,UAAW,CAGzE,GADkB,IAAIwC,IAAIC,GAAwB/D,OAAOuC,SAASyB,MACpDC,SAAWjE,OAAOuC,SAAS0B,OAIvC,OAGFjE,OAAOC,iBAAiB,QAAQ,WAC9B,IAAM0C,EAAK,UAAMoB,GAAN,sBAEP1B,IAgEV,SAAiCM,EAAOC,GAEtCsB,MAAMvB,EAAO,CACXwB,QAAS,CAAE,iBAAkB,YAE5BzD,MAAK,SAAA0D,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ClD,UAAUuB,cAAc4B,MAAM/D,MAAK,SAAAqC,GACjCA,EAAa2B,aAAahE,MAAK,WAC7BV,OAAOuC,SAASoC,eAKpBjC,EAAgBC,EAAOC,MAG1BY,OAAM,WACLpD,QAAQC,IACN,oEAvFAuE,CAAwBjC,EAAOC,GAI/BtB,UAAUuB,cAAc4B,MAAM/D,MAAK,WACjCN,QAAQC,IACN,iHAMJqC,EAAgBC,EAAOC,OCvC/BC,K","file":"static/js/main.4724f03b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\nimport './AppInstall.scss';\n\nconst AppInstall = props => {\n\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [showInstallPrompt, setShowInstallPrompt] = useState(false);\n\n  useEffect(() => {\n\n    window.addEventListener('beforeinstallprompt', (e) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      setDeferredPrompt(e);\n      // Update UI notify the user they can install the PWA\n      setShowInstallPrompt(true);\n    });\n\n    window.addEventListener('appinstalled', (e) => {\n      console.log('a2hs installed');\n    });\n\n  }, []);\n\n  const installApp = () => {\n    // Hide the app provided install promotion\n    setShowInstallPrompt(false);\n    // Show the install prompt\n    deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    deferredPrompt.userChoice.then((choiceResult) => {\n      if (choiceResult.outcome === 'accepted') {\n        console.log('User accepted the install prompt');\n      } else {\n        console.log('User dismissed the install prompt');\n      }\n    })\n  }\n\n  return (\n    showInstallPrompt &&\n    <div className=\"AppInstall\">\n      <div>Customer App Installer React PWA <button onClick={installApp}>Install</button></div>\n    </div>\n  );\n}\n\nexport const withAppInstall = Component => {\n  return () => (\n    <React.Fragment>\n      <AppInstall />\n      <Component />\n    </React.Fragment>\n  )\n}\n\nexport default AppInstall;","import React, { useState, useEffect, useRef } from 'react';\n\nconst Webcam = props => {\n  const [mediaStream, setMediaStream] = useState(null);\n  const videoRef = useRef();\n\n  // componentDidMount\n  useEffect(() => {\n    enableStream();\n\n    // componentWillUnmount\n    return (() => {\n\n    })\n  }, []);\n\n  // componentDidUpdate\n  useEffect(() => {\n    if (mediaStream && videoRef.current && !videoRef.current.srcObject) {\n      videoRef.current.srcObject = mediaStream;\n    }\n  }, [mediaStream]);\n\n  const enableStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: { facingMode: 'environment' }\n      });\n      setMediaStream(stream);\n    }\n    catch (err) {\n      console.log(err);\n    }\n  }\n\n  const handleCanPlay = () => {\n    videoRef.current.play();\n  }\n\n  return (\n    mediaStream &&\n    <React.Fragment>\n      <video\n        ref={videoRef}\n        onCanPlay={handleCanPlay}\n        autoPlay\n        playsInline\n        muted\n      />\n    </React.Fragment>\n  )\n}\n\nexport default Webcam;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { withAppInstall } from './AppInstall';\nimport Webcam from './Webcam';\n\nconst App = props => {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit<code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <div>This is the webcam application Here</div>\n      <Webcam />\n    </div>\n  );\n}\n\nexport default withAppInstall(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}