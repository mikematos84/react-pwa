{"version":3,"sources":["AppInstall.js","services/hasMediaRecorder.js","services/routerHelper.js","pages/Home/index.js","pages/NotFound/index.js","components/MediaRecorderCapture/index.js","pages/MediaRecorder/index.js","components/CameraInput/index.js","pages/DefaultCameraInput/index.js","pages/Sandbox/index.js","services/userAgent.js","services/browser.js","App.js","serviceWorker.js","index.js"],"names":["Component","AppInstall","props","useState","deferredPrompt","setDeferredPrompt","showInstallPrompt","setShowInstallPrompt","useEffect","window","addEventListener","e","preventDefault","console","log","className","onClick","prompt","userChoice","then","choiceResult","outcome","hasMediaRecorder","MediaRecorder","currentPage","location","pathname","substring","lastIndexOf","split","Home","to","NotFound","MediaRecorderCapture","mediaRecorder","setMediaRecorder","isRecording","setIsRecording","recorderRef","useRef","playerRef","initializeMediaRecorder","chunks","ondataavailable","push","data","onstop","blob","Blob","type","url","URL","webkitURL","createObjectURL","setPlaybackPreview","createDownloadLink","onerror","error","link","href","download","linkContainer","document","getElementById","ReactDOM","render","state","start","a","stop","current","src","setRecordingStreamPreview","stream","srcObject","createMediaRecorder","Promise","resolve","reject","err","navigator","mediaDevices","getUserMedia","audio","video","facingMode","Fragment","ref","autoPlay","playsInline","muted","controls","id","CameraInput","processFileInput","fileInput","files","accept","capture","DefaultCameraInput","Sandbox","useMediaDevices","JSON","stringify","userAgent","toLowerCase","vendor","toLocaleLowerCase","debug","toString","test","process","withAppInstall","basename","path","exact","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b95f4838.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './AppInstall.scss';\n\nconst AppInstall = props => {\n\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [showInstallPrompt, setShowInstallPrompt] = useState(false);\n\n  useEffect(() => {\n\n    window.addEventListener('beforeinstallprompt', (e) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      setDeferredPrompt(e);\n      // Update UI notify the user they can install the PWA\n      setShowInstallPrompt(true);\n    });\n\n    window.addEventListener('appinstalled', (e) => {\n      console.log('a2hs installed');\n    });\n\n  }, []);\n\n  const installApp = () => {\n    // Hide the app provided install promotion\n    setShowInstallPrompt(false);\n    // Show the install prompt\n    deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    deferredPrompt.userChoice.then((choiceResult) => {\n      if (choiceResult.outcome === 'accepted') {\n        console.log('User accepted the install prompt');\n      } else {\n        console.log('User dismissed the install prompt');\n      }\n    })\n  }\n\n  return (\n    showInstallPrompt &&\n    <div className=\"AppInstall\">\n      <div>Customer App Installer React PWA <button onClick={installApp}>Install</button></div>\n    </div>\n  );\n}\n\nexport const withAppInstall = Component => {\n  return () => (\n    <React.Fragment>\n      <AppInstall />\n      <Component />\n    </React.Fragment>\n  )\n}\n\nexport default AppInstall;","// Detect if MediaRecorder is available\nconst hasMediaRecorder = () => {\n  return !(typeof MediaRecorder === \"undefined\");\n}\n\nexport { hasMediaRecorder }","const currentPage = (location = null) => {\n  const { pathname } = location;\n  return pathname.substring(pathname.lastIndexOf('/') + 1).split('?')[0];\n}\n\nexport {\n  currentPage\n}","import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport '../../App.scss';\n\n// Services\nimport { hasMediaRecorder } from '../../services/hasMediaRecorder';\nimport { currentPage } from '../../services/routerHelper';\n\nconst Home = props => {\n  return (\n    <div className={currentPage(props.location)}>\n      <div>Determining best video capture method...</div>\n      {\n        hasMediaRecorder() ?\n          <Redirect to=\"/media-recorder-capture\" /> :\n          <Redirect to=\"/default-camera-input\" />\n      }\n    </div>\n  )\n}\n\nexport default Home;","import React from 'react';\nimport '../../App.scss';\nimport { currentPage } from '../../services/routerHelper';\n\nconst NotFound = props => {\n  return (\n    <div className={currentPage(props.location)}>\n      <div>Not Found</div>\n    </div>\n  )\n}\n\nexport default NotFound;","import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst MediaRecorderCapture = props => {\n  const [mediaRecorder, setMediaRecorder] = useState({});\n  const [isRecording, setIsRecording] = useState(false);\n  const recorderRef = useRef();\n  const playerRef = useRef();\n\n  /**\n   * Initialize the MediaRecorder on component mount\n   */\n  useEffect(() => {\n    initializeMediaRecorder();\n  }, [])\n\n  /**\n   * Upon MedaRecorder being set, monitor the following events\n   */\n  useEffect(() => {\n    let chunks = [];\n\n    mediaRecorder.ondataavailable = e => chunks.push(e.data)\n\n    mediaRecorder.onstop = e => {\n      let blob = new Blob(chunks, { type: 'video/mp4' });\n      chunks = [];\n      let url = (window.URL || window.webkitURL).createObjectURL(blob);\n      setPlaybackPreview(url);\n      createDownloadLink(url);\n    }\n\n    mediaRecorder.onerror = e => {\n      console.log('Error recording stream');\n      console.log(e.error);\n    }\n\n    console.log('MediaRecorder ready');\n  }, [mediaRecorder]);\n\n  const createDownloadLink = url => {\n    const link = <a href={url} download=\"Recording.mp4\">Download</a>;\n    const linkContainer = document.getElementById('download-link');\n    ReactDOM.render(link, linkContainer);\n  }\n\n  /**\n   * Helper function to console out change in state of the MediaRecorder\n   */\n  useEffect(() => {\n    console.log(`MediaRecorder state: ${mediaRecorder.state}`)\n  }, [mediaRecorder.state])\n\n  /**\n   * Start recording the stream\n   */\n  const start = async () => {\n    if (mediaRecorder.state === 'recording') return;\n    mediaRecorder.start();\n    setIsRecording(true);\n  }\n\n  /**\n   * Stop recording the stream\n   */\n  const stop = async () => {\n    if (mediaRecorder.state === 'inactive') return;\n    mediaRecorder.stop();\n    setIsRecording(false);\n    await initializeMediaRecorder();\n  }\n\n  /**\n   * Set the playback player's source to the url of the newly recorderd stream\n   * @param {string} url \n   */\n  const setPlaybackPreview = url => {\n    if (!playerRef.current) return;\n    console.log(`Playback URL: ${url}`);\n    playerRef.current.src = url;\n  }\n\n  /**\n   * Get a media device stream (webcam)\n   */\n  const getStream = () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: {\n            facingMode: 'user'\n          }\n        });\n        console.log('Stream fetched');\n        resolve(stream);\n      }\n      catch (err) {\n        console.log('Error in fetching stream')\n        reject(err);\n      }\n    })\n  }\n\n  /**\n   * Set the live stream retrieved from the media device\n   * to the designated player to preview\n   * @param {object} stream \n   */\n  const setRecordingStreamPreview = stream => {\n    if (!recorderRef.current) return;\n    recorderRef.current.srcObject = stream;\n  }\n\n  /**\n   * Create MediaRecorder object from a given stream\n   * @param {object} stream \n   */\n  const createMediaRecorder = stream => {\n    return new Promise((resolve, reject) => {\n      try {\n        const mediaRecorder = new MediaRecorder(stream);\n        console.log('New MediaRecorder created');\n        resolve(mediaRecorder);\n      }\n      catch (err) {\n        console.log('Error in creating new MediaRecorder');\n        reject(err);\n      }\n    })\n  }\n\n  /**\n   * Initialize MediaRecorder\n   */\n  const initializeMediaRecorder = async () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const stream = await getStream();\n        setRecordingStreamPreview(stream);\n        const mediaRecorder = await createMediaRecorder(stream);\n        setMediaRecorder(mediaRecorder);\n        resolve(mediaRecorder);\n      }\n      catch (err) {\n        console.log('Error in initializing MediaRecorder of fetching media devices stream')\n        reject(err);\n      }\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <h1>MediaRecorder</h1>\n      <div>\n        <button\n          onClick={isRecording ? stop : start}\n          className={isRecording ? 'recording' : ''}\n        >{isRecording ? 'Stop' : 'Start'} Recording </button>\n      </div>\n      <div>\n        <h3>MediaRecorderCapture</h3>\n        <video\n          className=\"recorder\"\n          ref={recorderRef}\n          autoPlay\n          playsInline\n          muted\n        />\n      </div>\n      <div>\n        <h3>Playback</h3>\n        <video\n          className=\"player\"\n          controls\n          ref={playerRef}\n          autoPlay\n          playsInline\n        />\n      </div>\n      <div id=\"download-link\"></div>\n    </React.Fragment>\n  )\n}\n\nexport default MediaRecorderCapture;","import React from 'react';\nimport '../../App.scss';\nimport MediaRecorderCapture from '../../components/MediaRecorderCapture';\nimport { currentPage } from '../../services/routerHelper';\n\nconst MediaRecorder = props => {\n  return (\n    <div className={currentPage(props.location)}>\n      <MediaRecorderCapture />\n    </div>\n  )\n}\n\nexport default MediaRecorder;","import React, { useEffect, useRef } from 'react';\n\nconst CameraInput = props => {\n  const playerRef = useRef();\n\n  useEffect(() => {\n    processFileInput();\n  }, [])\n\n  const processFileInput = () => {\n    const fileInput = document.getElementById('file-input');\n    fileInput.addEventListener('change', e => {\n      playerRef.current.src = (window.webkitURL || window.URL).createObjectURL(fileInput.files[0]);\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <h1>Camera Input</h1>\n      <input type=\"file\" accept=\"video/*\" id=\"file-input\" capture=\"user\"></input>\n      <div>\n        <h3>Playback</h3>\n        <video\n          className=\"player\"\n          controls\n          ref={playerRef}\n          autoPlay\n          playsInline\n        />\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default CameraInput;","import React from 'react';\nimport '../../App.scss';\nimport CameraInput from '../../components/CameraInput';\nimport { currentPage } from '../../services/routerHelper';\n\nconst DefaultCameraInput = props => {\n  return (\n    <div className={currentPage(props.location)}>\n      <CameraInput />\n    </div>\n  )\n}\n\nexport default DefaultCameraInput;","import React from 'react';\nimport '../../styles/_sandbox.scss';\n\nimport { useMediaDevices } from 'react-use';\nimport { currentPage } from '../../services/routerHelper';\n\nconst Sandbox = props => {\n  const state = useMediaDevices();\n\n  return (\n    <div className={currentPage(props.location)}>\n      <pre>\n        {JSON.stringify(state, null, 2)}\n      </pre>\n    </div>\n  )\n}\n\nexport default Sandbox;","const userAgent = window.navigator.userAgent.toLowerCase();\nconst vendor = window.navigator.vendor.toLocaleLowerCase();\n\n// Detects if device is on iOS \nconst isIos = () => {\n  return /iphone|ipad|ipod/.test(userAgent);\n}\n\n// Detects if device is on Android\nconst isAndroid = () => {\n  return /android/.test(userAgent);\n}\n\n// Detects if browser is Safari\nconst isSafari = () => {\n  return /apple/.test(vendor);\n}\n\n// Detects if browser is Chrome\nconst isChrome = () => {\n  return /google/.test(vendor);\n}\n\n// Detects if device is in standalone mode\nconst isInStandaloneMode = () => ('standalone' in window.navigator) && (window.navigator.standalone);\n\nexport {\n  userAgent,\n  vendor,\n  isIos,\n  isAndroid,\n  isInStandaloneMode,\n  isSafari,\n  isChrome,\n}","import React from 'react';\nimport { userAgent, isIos, isSafari } from './userAgent';\nimport { hasMediaRecorder } from './hasMediaRecorder';\n\nconst debug = () => (\n  <table>\n    <tbody>\n      <tr><td>User Agent</td><td>{userAgent.toString()}</td></tr>\n      <tr><td>Is iOS</td><td>{isIos().toString()}</td></tr>\n      <tr><td>Is Safari</td><td>{isSafari().toString()}</td></tr>\n      <tr><td>Has MediaRecorder</td><td>{hasMediaRecorder().toString()}</td></tr>\n      <tr><td>Environment</td><td>{process.env.NODE_ENV}</td></tr>\n      <tr><td>Public URL</td><td>{process.env.PUBLIC_URL}</td></tr>\n    </tbody>\n  </table>\n)\n\nexport {\n  debug\n}","import React from 'react';\nimport './App.scss';\nimport { withAppInstall } from './AppInstall';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link\n} from 'react-router-dom';\n\n// Pages\nimport Home from './pages/Home';\nimport NotFound from './pages/NotFound';\nimport MediaRecorder from './pages/MediaRecorder';\nimport DefaultCameraInput from './pages/DefaultCameraInput';\nimport Sandbox from './pages/Sandbox';\nimport { debug } from './services/browser';\n\nconst App = props => {\n  return (\n    <Router basename={process.env.NODE_ENV === \"development\" ? \"/react-pwa\" : \".\"}>\n      <div className=\"App\">\n        <ul className=\"navigation\">\n          <li><Link to=\"/\">Home</Link></li>\n          <li><Link to=\"/default-camera-input\">Default Camera Input</Link></li>\n          <li><Link to=\"/media-recorder-capture\">MediaRecorder Capture</Link></li>\n          <li><Link to=\"/sandbox\">Sandbox</Link></li>\n        </ul>\n        {debug()}\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/default-camera-input\" component={DefaultCameraInput} />\n          <Route path=\"/media-recorder-capture\" component={MediaRecorder} />\n          <Route path=\"/sandbox\" component={Sandbox} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default withAppInstall(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}