{"version":3,"sources":["AppInstall.js","Recorder.js","CameraInput.js","App.js","serviceWorker.js","index.js"],"names":["Component","AppInstall","props","useState","deferredPrompt","setDeferredPrompt","showInstallPrompt","setShowInstallPrompt","useEffect","window","addEventListener","e","preventDefault","console","log","className","onClick","prompt","userChoice","then","choiceResult","outcome","Recorder","mediaRecorder","setMediaRecorder","isRecording","setIsRecording","recorderRef","useRef","playerRef","initializeMediaRecorder","chunks","ondataavailable","push","data","onstop","blob","Blob","type","url","URL","webkitURL","createObjectURL","setPlaybackPreview","createDownloadLink","onerror","error","link","href","download","linkContainer","document","getElementById","ReactDOM","render","state","start","a","stop","current","src","setRecordingStreamPreview","stream","srcObject","createMediaRecorder","Promise","resolve","reject","MediaRecorder","err","navigator","mediaDevices","getUserMedia","audio","video","facingMode","Fragment","ref","autoPlay","playsInline","muted","controls","id","CameraInput","processFileInput","fileInput","files","accept","capture","withAppInstall","userAgent","toLowerCase","test","standalone","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.990a3870.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './AppInstall.scss';\n\nconst AppInstall = props => {\n\n  const [deferredPrompt, setDeferredPrompt] = useState(null);\n  const [showInstallPrompt, setShowInstallPrompt] = useState(false);\n\n  useEffect(() => {\n\n    window.addEventListener('beforeinstallprompt', (e) => {\n      // Prevent the mini-infobar from appearing on mobile\n      e.preventDefault();\n      // Stash the event so it can be triggered later.\n      setDeferredPrompt(e);\n      // Update UI notify the user they can install the PWA\n      setShowInstallPrompt(true);\n    });\n\n    window.addEventListener('appinstalled', (e) => {\n      console.log('a2hs installed');\n    });\n\n  }, []);\n\n  const installApp = () => {\n    // Hide the app provided install promotion\n    setShowInstallPrompt(false);\n    // Show the install prompt\n    deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    deferredPrompt.userChoice.then((choiceResult) => {\n      if (choiceResult.outcome === 'accepted') {\n        console.log('User accepted the install prompt');\n      } else {\n        console.log('User dismissed the install prompt');\n      }\n    })\n  }\n\n  return (\n    showInstallPrompt &&\n    <div className=\"AppInstall\">\n      <div>Customer App Installer React PWA <button onClick={installApp}>Install</button></div>\n    </div>\n  );\n}\n\nexport const withAppInstall = Component => {\n  return () => (\n    <React.Fragment>\n      <AppInstall />\n      <Component />\n    </React.Fragment>\n  )\n}\n\nexport default AppInstall;","import React, { useState, useEffect, useRef } from 'react';\nimport ReactDOM from 'react-dom';\nimport './Recorder.scss';\n\nconst Recorder = props => {\n  const [mediaRecorder, setMediaRecorder] = useState({});\n  const [isRecording, setIsRecording] = useState(false);\n  const recorderRef = useRef();\n  const playerRef = useRef();\n\n  /**\n   * Initialize the MediaRecorder on component mount\n   */\n  useEffect(() => {\n    initializeMediaRecorder();\n  }, [])\n\n  /**\n   * Upon MedaRecorder being set, monitor the following events\n   */\n  useEffect(() => {\n    let chunks = [];\n\n    mediaRecorder.ondataavailable = e => chunks.push(e.data)\n\n    mediaRecorder.onstop = e => {\n      let blob = new Blob(chunks, { type: 'video/mp4' });\n      chunks = [];\n      let url = (window.URL || window.webkitURL).createObjectURL(blob);\n      setPlaybackPreview(url);\n      createDownloadLink(url);\n    }\n\n    mediaRecorder.onerror = e => {\n      console.log('Error recording stream');\n      console.log(e.error);\n    }\n\n    console.log('MediaRecorder ready');\n  }, [mediaRecorder]);\n\n  const createDownloadLink = url => {\n    const link = <a href={url} download=\"Recording.mp4\">Download</a>;\n    const linkContainer = document.getElementById('download-link');\n    ReactDOM.render(link, linkContainer);\n  }\n\n  /**\n   * Helper function to console out change in state of the MediaRecorder\n   */\n  useEffect(() => {\n    console.log(`MediaRecorder state: ${mediaRecorder.state}`)\n  }, [mediaRecorder.state])\n\n  /**\n   * Start recording the stream\n   */\n  const start = async () => {\n    if (mediaRecorder.state === 'recording') return;\n    mediaRecorder.start();\n    setIsRecording(true);\n  }\n\n  /**\n   * Stop recording the stream\n   */\n  const stop = async () => {\n    if (mediaRecorder.state === 'inactive') return;\n    mediaRecorder.stop();\n    setIsRecording(false);\n    await initializeMediaRecorder();\n  }\n\n  /**\n   * Set the playback player's source to the url of the newly recorderd stream\n   * @param {string} url \n   */\n  const setPlaybackPreview = url => {\n    if (!playerRef.current) return;\n    console.log(`Playback URL: ${url}`);\n    playerRef.current.src = url;\n  }\n\n  /**\n   * Get a media device stream (webcam)\n   */\n  const getStream = () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: {\n            facingMode: 'user'\n          }\n        });\n        console.log('Stream fetched');\n        resolve(stream);\n      }\n      catch (err) {\n        console.log('Error in fetching stream')\n        reject(err);\n      }\n    })\n  }\n\n  /**\n   * Set the live stream retrieved from the media device\n   * to the designated player to preview\n   * @param {object} stream \n   */\n  const setRecordingStreamPreview = stream => {\n    if (!recorderRef.current) return;\n    recorderRef.current.srcObject = stream;\n  }\n\n  /**\n   * Create MediaRecorder object from a given stream\n   * @param {object} stream \n   */\n  const createMediaRecorder = stream => {\n    return new Promise((resolve, reject) => {\n      try {\n        const mediaRecorder = new MediaRecorder(stream);\n        console.log('New MediaRecorder created');\n        resolve(mediaRecorder);\n      }\n      catch (err) {\n        console.log('Error in creating new MediaRecorder');\n        reject(err);\n      }\n    })\n  }\n\n  /**\n   * Initialize MediaRecorder\n   */\n  const initializeMediaRecorder = async () => {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const stream = await getStream();\n        setRecordingStreamPreview(stream);\n        const mediaRecorder = await createMediaRecorder(stream);\n        setMediaRecorder(mediaRecorder);\n        resolve(mediaRecorder);\n      }\n      catch (err) {\n        console.log('Error in initializing MediaRecorder of fetching media devices stream')\n        reject(err);\n      }\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <h1>MediaRecorder</h1>\n      <div>\n        <button\n          onClick={isRecording ? stop : start}\n          className={isRecording ? 'recording' : ''}\n        >{isRecording ? 'Stop' : 'Start'} Recording </button>\n      </div>\n      <div>\n        <h3>Recorder</h3>\n        <video\n          className=\"recorder\"\n          ref={recorderRef}\n          autoPlay\n          playsInline\n          muted\n        />\n      </div>\n      <div>\n        <h3>Playback</h3>\n        <video\n          className=\"player\"\n          controls\n          ref={playerRef}\n          autoPlay\n          playsInline\n        />\n      </div>\n      <div id=\"download-link\"></div>\n    </React.Fragment>\n  )\n}\n\nexport default Recorder;","import React, { useEffect, useRef } from 'react';\nimport './Recorder.scss';\n\nconst CameraInput = props => {\n  const playerRef = useRef();\n\n  useEffect(() => {\n    processFileInput();\n  }, [])\n\n  const processFileInput = () => {\n    const fileInput = document.getElementById('file-input');\n    fileInput.addEventListener('change', e => {\n      playerRef.current.src = (window.webkitURL || window.URL).createObjectURL(fileInput.files[0]);\n    })\n  }\n\n  return (\n    <React.Fragment>\n      <h1>Camera Input</h1>\n      <input type=\"file\" accept=\"video/*\" id=\"file-input\" capture=\"user\"></input>\n      <div>\n        <h3>Playback</h3>\n        <video\n          className=\"player\"\n          controls\n          ref={playerRef}\n          autoPlay\n          playsInline\n        />\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default CameraInput;","import React from 'react';\nimport './App.scss';\nimport { withAppInstall } from './AppInstall';\nimport Recorder from './Recorder';\nimport CameraInput from './CameraInput';\n\nconst App = props => {\n  const userAgent = window.navigator.userAgent.toLowerCase();\n\n  // Detects if device is on iOS \n  const isIos = () => {\n    return /iphone|ipad|ipod/.test(userAgent);\n  }\n\n  // Detects if device is on Android\n  const isAndroid = () => {\n    return /android/.test(userAgent);\n  }\n\n  // Detects if device is in standalone mode\n  const isInStandaloneMode = () => ('standalone' in window.navigator) && (window.navigator.standalone);\n\n  return (\n    <div className=\"App\">\n      <div>{userAgent}</div>\n      {isIos() && !isInStandaloneMode() || isAndroid() ? <CameraInput /> : <Recorder />}\n    </div>\n  );\n}\n\nexport default withAppInstall(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}